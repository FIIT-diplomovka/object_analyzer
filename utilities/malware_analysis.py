import pickle
import math
import subprocess
import json
import pandas
import os

class MalwareAnalysis:

    OS_DELIMITER = "\\" if os.name == "nt" else "/" 
    TIKA_JAR_PATH = "analysis" + OS_DELIMITER + "tika" + OS_DELIMITER + "tika-app-2.5.0.jar"
    TIKA_FEATURES = "analysis" + OS_DELIMITER + "malware" + OS_DELIMITER + "tika" + OS_DELIMITER + "tika_features.txt"
    TIKA_SCHEMA = "analysis" + OS_DELIMITER + "malware" + OS_DELIMITER + "tika" + OS_DELIMITER + "tika_schema.json"
    TIKA_ENCODER = "analysis" + OS_DELIMITER + "malware" + OS_DELIMITER + "tika" + OS_DELIMITER + "tika_encoder_optimized.pkl"
    TIKA_MODEL = "analysis" + OS_DELIMITER + "malware" + OS_DELIMITER + "tika" + OS_DELIMITER + "tika_rf_onehot_optimized.pkl"
    SUPPORTED_MALWARE_EXTENSIONS = {"docx", "rtf", "xlsx", "pptx", "pdf", "exe", "doc", "docm", "xlsm"}

    def _get_entropy(self, filename):
        with open(filename, "rb") as file:
            counters = {byte: 0 for byte in range(2 ** 8)}
            for byte in file.read():
                counters[byte] += 1
            filesize = file.tell()
            if filesize == 0:
                return None
            probabilities = [counter / filesize for counter in counters.values()]
            entropy =- sum(probability * math.log2(probability) for probability in probabilities if probability > 0)
            return round(entropy, 8)

    @staticmethod
    def is_analysis_supported(file_path):
        filename, file_extension = os.path.splitext(file_path)
        file_extension = file_extension.replace(".", "")
        if file_extension in MalwareAnalysis.SUPPORTED_MALWARE_EXTENSIONS:
            return True
        return False


    def __init__(self) -> None:
        tika_encoder_f = open(MalwareAnalysis.TIKA_ENCODER, "rb")
        self.tika_encoder = pickle.load(tika_encoder_f)
        tika_encoder_f.close()
        
        tika_model_f = open(MalwareAnalysis.TIKA_MODEL, "rb")
        self.tika_model = pickle.load(tika_model_f)
        tika_model_f.close()

        tika_schema_f = open(MalwareAnalysis.TIKA_SCHEMA, "r")
        self.tika_schema = json.load(tika_schema_f)
        tika_schema_f.close()


    def is_malware_using_tika(self, filename):
        tika_container = {}
        with open(MalwareAnalysis.TIKA_FEATURES, encoding="utf-8") as features:
            for line in features:
                line = line.rstrip()
                tika_container[line] = None
        tika = subprocess.run(["java", "-jar", MalwareAnalysis.TIKA_JAR_PATH,
                      "--json", filename], capture_output=True, text=True)
        # tika failure, dont continue
        if not tika.returncode == 0:
            return None
        metadata = json.loads(tika.stdout)
        for key in list(metadata.keys()):
            if key not in tika_container or isinstance(metadata[key], list):
                metadata.pop(key, None)
                continue
            tika_container[key] = metadata[key]

        tika_container["entropy"] = self._get_entropy(filename)
        df = pandas.DataFrame([tika_container], index=[0])
        df = df.astype(self.tika_schema)
        x_test = self.tika_encoder.transform(df)
        y_pred = self.tika_model.predict(x_test)
        # 0 indicates NOT a malware, 1 indicates malware
        # it returns a numpy int, which cannot be serialized into JSON, so a conversion is necessary
        return int(y_pred[0])
